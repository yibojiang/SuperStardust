/*
-----------------------------------------------------------------------------
Filename:    STGGame.cpp
-----------------------------------------------------------------------------


This source file is generated by the
   ___                   _              __    __ _                  _ 
  /___\__ _ _ __ ___    /_\  _ __  _ __/ / /\ \ (_)______ _ _ __ __| |
 //  // _` | '__/ _ \  //_\\| '_ \| '_ \ \/  \/ / |_  / _` | '__/ _` |
/ \_// (_| | | |  __/ /  _  \ |_) | |_) \  /\  /| |/ / (_| | | | (_| |
\___/ \__, |_|  \___| \_/ \_/ .__/| .__/ \/  \/ |_/___\__,_|_|  \__,_|
      |___/                 |_|   |_|                                 
      Ogre 1.7.x Application Wizard for VC10 (August 2010)
      http://code.google.com/p/ogreappwizards/
-----------------------------------------------------------------------------
*/

#include "STGGame.h"
#include "ScoreManager.h"
void STGGame::createScene(void)
{
	INSTANCE(WorldManager)->Init(mSceneMgr);
	INSTANCE(CameraManager)->Init(mCamera);
	INSTANCE(ScoreManager)->Init();
	INSTANCE(GameStateManager)->Init();
	
}

void STGGame::createFrameListener()
{
	BaseApplication::createFrameListener();
}


bool STGGame::frameRenderingQueued(const FrameEvent& evt )
{
	if (mWindow->isClosed()) return false;
	if (mShutDown) return false;

	mKeyboard->capture();
	mMouse->capture();

	//Check whether enable joyStick.
	if (mJoyStick)
		mJoyStick->capture();


	//Ö¡Êý´°¿Ú
	mTrayMgr->frameRenderingQueued(evt);

	INSTANCE(GameStateManager)->AddTime(evt.timeSinceLastFrame);
	INSTANCE(CameraManager)->AddTime(evt.timeSinceLastFrame);

	
	

	return true;
}

bool STGGame::keyPressed( const OIS::KeyEvent& evt )
{
	INSTANCE(GameStateManager)->InjectKeyDown(evt);

	return true;
}
bool STGGame::keyReleased( const OIS::KeyEvent& evt )
{
	INSTANCE(GameStateManager)->InjectKeyUp(evt);
	
	return true;
}

bool STGGame::mouseMoved( const OIS::MouseEvent& evt )
{

	return true;
}
bool STGGame::mousePressed( const OIS::MouseEvent& evt, OIS::MouseButtonID id )
{

	return true;
}
bool STGGame::mouseReleased( const OIS::MouseEvent& evt, OIS::MouseButtonID id )
{

	return true;
}

bool STGGame::buttonPressed( const OIS::JoyStickEvent &arg, int button )
{
	
	INSTANCE(GameStateManager)->InjectButtonPressed(arg,button);
	return true;
}

bool STGGame::buttonReleased( const OIS::JoyStickEvent &arg, int button )
{
	INSTANCE(GameStateManager)->InjectButtonReleased(arg,button);
	return true;
}

bool STGGame::axisMoved( const OIS::JoyStickEvent &arg, int axis )
{
	INSTANCE(GameStateManager)->InjectAxisMoved(arg,axis);

	return true;
}

//-------------------------------------------------------------------------------------
STGGame::STGGame(void)
{
}
//-------------------------------------------------------------------------------------
STGGame::~STGGame(void)
{
}



//-------------------------------------------------------------------------------------

#if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
#define WIN32_LEAN_AND_MEAN
#include "windows.h"
#endif

#ifdef __cplusplus
extern "C" {
#endif

#if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
    INT WINAPI WinMain( HINSTANCE hInst, HINSTANCE, LPSTR strCmdLine, INT )
#else
    int main(int argc, char *argv[])
#endif
    {
        // Create application object
        STGGame app;

        try {
			
            app.go();
        } catch( Ogre::Exception& e ) {
#if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
            MessageBox( NULL, e.getFullDescription().c_str(), "An exception has occured!", MB_OK | MB_ICONERROR | MB_TASKMODAL);
#else
            std::cerr << "An exception has occured: " <<
                e.getFullDescription().c_str() << std::endl;
#endif
        }

        return 0;
    }

#ifdef __cplusplus
}
#endif
